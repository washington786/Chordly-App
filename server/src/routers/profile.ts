import { PageRequestDocument } from "#/@types/misc";
import { isAuth, isAuthenticated } from "#/middleware/auth/auth";
import Audio from "#/models/audios";
import AutoGeneratedPlaylist from "#/models/autoGeneratedPlaylist";
import History from "#/models/history";
import Playlist from "#/models/playlist";
import users from "#/models/users";
import { getUserHistory } from "#/utils/helpers";
import { Request, Response, Router } from "express";

import mongoose, { Types } from "mongoose";
import { isValidObjectId, PipelineStage } from "mongoose";

const profileRouter = Router();

profileRouter.post(
  "/update-followers/:followerId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const { followerId } = req.params;

    let status: "added" | "removed";

    if (!isValidObjectId(followerId)) {
      res.status(403).json({ message: "Invalid follower id" });
      return;
    }

    const user = await users.findById(followerId);

    if (!user) {
      res.status(404).json({ message: "not found." });
      return;
    }

    const alreadyFollower = await users.findOne({
      _id: followerId,
      followers: req.user?.id,
    });

    if (alreadyFollower) {
      await users.updateOne(
        { _id: followerId },
        { $pull: { followers: req.user?.id } }
      );
      status = "removed";
    } else {
      await users.updateOne(
        { _id: followerId },
        { $addToSet: { followers: req.user?.id } }
      );
      status = "added";
    }

    if (status === "added") {
      await users.updateOne(
        { _id: req.user?.id },
        { $addToSet: { followings: followerId } }
      );
    }

    if (status === "removed") {
      await users.updateOne(
        { _id: req.user?.id },
        { $pull: { followings: followerId } }
      );
    }

    res.status(200).json({ message: `${status}` });
  }
);

profileRouter.get(
  "/uploads",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const ownerId = req.user?.id;

    const { pageNo = "0", limit = "20" } = req.query as PageRequestDocument;

    const uploads = await Audio.find({ owner: ownerId })
      .skip(parseInt(limit) * parseInt(pageNo))
      .limit(parseInt(limit))
      .sort("-createdAt");

    const audios = uploads.map((item) => {
      const { _id, title, about, file, poster, createdAt, owner, category } =
        item;
      return {
        id: _id,
        title,
        about,
        category,
        file: file.url,
        poster: poster.url,
        date: createdAt,
        owner: owner,
      };
    });

    res.status(200).json({ audios });
  }
);
profileRouter.get(
  "/uploads/:profileId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const { profileId } = req.params;

    const { pageNo = "0", limit = "20" } = req.query as PageRequestDocument;

    if (!isValidObjectId(profileId)) {
      res.status(422).json({ message: "Invalid profile id" });
      return;
    }

    const uploads = await Audio.find({ owner: profileId })
      .skip(parseInt(limit) * parseInt(pageNo))
      .limit(parseInt(limit))
      .sort("-createdAt");

    const audios = uploads.map((item) => {
      const { _id, title, about, file, poster, createdAt, owner } = item;
      return {
        id: _id,
        title,
        about,
        file: file.url,
        poster: poster.url,
        date: createdAt,
        owner: owner,
      };
    });

    res.status(200).json({ audios });
  }
);

profileRouter.get(
  "/profileInfo/:profileId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const { profileId } = req.params;

    if (!isValidObjectId(profileId)) {
      res.status(422).json({ message: "Invalid profile id" });
      return;
    }

    const userProfile = await users.findById(profileId);

    if (!userProfile) {
      res.status(404).json({ message: "Profile not found" });
      return;
    }

    const { _id, name, followers, avatar } = userProfile;

    res.status(200).json({
      profile: {
        id: _id,
        name,
        followers: followers.length,
        avatar: avatar?.url,
      },
    });
  }
);

profileRouter.get(
  "/publicPlaylist/:playlistId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const { playlistId } = req.params;

    const { limit = "20", pageNo = "0" } = req.query as PageRequestDocument;

    if (!isValidObjectId(playlistId)) {
      res.status(422).json({ message: "Invalid profile id" });
      return;
    }

    const playlist = await Playlist.find({
      owner: playlistId,
      visibility: "public",
    })
      .skip(parseInt(limit) * parseInt(pageNo))
      .limit(parseInt(limit))
      .sort("-createdAt");

    if (!playlist) {
      res.status(404).json({ playlist: [] });
      return;
    }

    const items = playlist.map((lst) => {
      const { _id, title, visibility, items } = lst;
      return { id: _id, title: title, visibility, items: items.length };
    });

    res.status(200).json({
      playlist: items,
    });
  }
);

// recommended: finding user liked kinder items
// profileRouter.get("/recommended", isAuth, async (req, res) => {
//   const user = req.user;

//   let matched: PipelineStage.Match = { $match: { _id: { $exists: true } } };

//   if (user) {
//     // const audios = await Audio.aggregate([{ $match: { owner: user } },]);

//     // fetch user history
//     const histories = await getUserHistory(req);

//     // const categories = histories.category;

//     if (histories.length) {
//       matched = {
//         $match: {
//           category: {
//             $in: histories,
//           },
//         },
//       };
//     }

//     return res.status(200).json({ audios: histories });
//   }

//   const audios = await Audio.aggregate([
//     matched,
//     {
//       $sort: {
//         "likes.count": -1,
//       },
//     },
//     { $limit: 10 },
//     {
//       $lookup: {
//         from: "users",
//         localField: "owner",
//         foreignField: "_id",
//         as: "owner",
//       },
//     },
//     {
//       $unwind: "$owner",
//     },
//     {
//       $project: {
//         _id: 0,
//         id: "$_id",
//         name: "$name",
//         title: "$title",
//         about: "$about",
//         category: "$category",
//         file: "$file.url",
//         poster: "$poster.url",
//         owner: { name: "$owner.name", id: "$owner._id" },
//       },
//     },
//   ]);

//   res.status(200).json({ audios });
// });
profileRouter.get(
  "/recommended",
  isAuth,
  async (req: Request, res: Response) => {
    try {
      const user = req.user;
      let matched: PipelineStage.Match = { $match: { _id: { $exists: true } } };

      if (user) {
        // Fetch user history
        const histories = await getUserHistory(req);

        // Extract categories if `histories` contains audio records
        const categories = histories
          .map((history) => history)
          .filter(Boolean);

        if (categories.length > 0) {
          matched = {
            $match: {
              category: {
                $in: categories,
              },
            },
          };
        }
      }

      const audios = await Audio.aggregate([
        matched,
        { $sort: { "likes.count": -1 } },
        { $limit: 10 },
        {
          $lookup: {
            from: "users",
            localField: "owner",
            foreignField: "_id",
            as: "owner",
          },
        },
        { $unwind: "$owner" },
        {
          $project: {
            _id: 0,
            id: "$_id",
            name: "$name",
            title: "$title",
            about: "$about",
            category: "$category",
            file: "$file.url",
            poster: "$poster.url",
            owner: { name: "$owner.name", id: "$owner._id" },
          },
        },
      ]);

      res.status(200).json({ audios });
    } catch (error) {
      console.error("Error fetching recommended audios:", error);
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
);

// profileRouter.get("/auto-playlist", isAuthenticated, async (req, res) => {
//   const [result] = await History.aggregate([
//     { $match: { owner: req.user?.id } },
//     { $unwind: "$all" },
//     {
//       $group: {
//         _id: "$all.audio",
//         items: { $addToSet: "$all.audio" },
//       },
//     },
//     { $sample: { size: 20 } },
//     {
//       $group: {
//         _id: null,
//         autoList: { $push: "$_id" },
//       },
//     },
//   ]);

//   if (result) {
//     await Playlist.updateOne(
//       { owner: req.user?.id, title: "Mix 20" },
//       { $set: { title: "Mix 20", items: result.items, visibility: "auto" } },
//       { upsert: true }
//     );
//   }

//   const histories = await getUserHistory(req);
//   let matched: PipelineStage.Match = { $match: { _id: { $exists: true } } };
//   if (histories) {
//     matched = { $match: { title: { $in: histories } } };
//   }

//   const autoList = await AutoGeneratedPlaylist.aggregate([
//     matched,
//     { $sample: { size: 4 } },
//     {
//       $project: {
//         _id: 0,
//         id: "$_id",
//         title: "$title",
//         itemsCount: { $size: "$items" },
//       },
//     },
//   ]);

//   const plist = await Playlist.findOne({
//     owner: req.user?.id,
//     title: "Mix 20",
//   });

//   const finalList = autoList.concat({
//     id: plist?._id,
//     title: plist?.title,
//     itemsCount: plist?.items.length,
//   });

//   res.status(200).json({ playlist: finalList });
// });
profileRouter.get("/auto-playlist", isAuthenticated, async (req, res) => {
  try {
    const [result] = await History.aggregate([
      { $match: { owner: req.user?.id } },
      { $unwind: "$all" },
      { $sample: { size: 20 } }, // Sample before grouping
      {
        $group: {
          _id: null,
          items: { $addToSet: "$all.audio" },
        },
      },
    ]);

    if (result) {
      await Playlist.updateOne(
        { owner: req.user?.id, title: "Mix 20" },
        { $set: { title: "Mix 20", items: result.items, visibility: "auto" } },
        { upsert: true }
      );
    }

    // Get user history
    const histories = await getUserHistory(req);
    let matched: PipelineStage.Match = { $match: { _id: { $exists: true } } };

    if (histories.length > 0) {
      const historyTitles = histories.map((h:any) => h.title); // Extract only titles
      matched = { $match: { title: { $in: historyTitles } } };
    }

    const autoList = await AutoGeneratedPlaylist.aggregate([
      matched,
      { $sample: { size: 4 } },
      {
        $project: {
          _id: 0,
          id: "$_id",
          title: "$title",
          itemsCount: { $size: "$items" },
        },
      },
    ]);

    const plist = await Playlist.findOne({
      owner: req.user?.id,
      title: "Mix 20",
    });

    // Ensure plist is not null before accessing properties
    const finalList = [
      ...autoList,
      ...(plist
        ? [
            {
              id: plist._id,
              title: plist.title,
              itemsCount: plist.items.length,
            },
          ]
        : []),
    ];

    res.status(200).json({ playlist: finalList });
  } catch (error) {
    console.error("Error generating auto-playlist:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

profileRouter.get(
  "/followers",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const owner = req.user?.id;

    if (!owner) {
      res.status(403).json({ message: "unauthorized access." });
      return;
    }

    const { limit = "20", pageNo = "0" } = req.query as PageRequestDocument;

    const [result] = await users.aggregate([
      { $match: { _id: new mongoose.Types.ObjectId(owner) } }, // Convert to ObjectId
      {
        $project: {
          followers: {
            $slice: [
              "$followers",
              parseInt(pageNo) * parseInt(limit),
              parseInt(limit),
            ],
          }, // Correct slicing
        },
      },
      {
        $unwind: "$followers",
      },
      {
        $lookup: {
          from: "users",
          localField: "followers",
          foreignField: "_id",
          as: "userInfo",
        },
      },
      {
        $unwind: "$userInfo",
      },
      {
        $group: {
          _id: null,
          followers: {
            $push: {
              id: "$userInfo._id",
              name: "$userInfo.name",
              avatar: "$userInfo.avatar.url",
            },
          },
        },
      },
    ]);

    if (!result) {
      res.status(200).json({ followers: [] });
      return;
    }

    res.status(200).json({ followers: result.followers });
  }
);

profileRouter.get(
  "/followers/:profileId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    //   const owner = req.user?.id;
    const { profileId } = req.params;

    if (!isValidObjectId(profileId)) {
      res.status(422).json({ message: "Invalid profile id." });
      return;
    }

    const { limit = "20", pageNo = "0" } = req.query as PageRequestDocument;

    const [result] = await users.aggregate([
      { $match: { _id: new mongoose.Types.ObjectId(profileId) } }, // Convert to ObjectId
      {
        $project: {
          followers: {
            $slice: [
              "$followers",
              parseInt(pageNo) * parseInt(limit),
              parseInt(limit),
            ],
          }, // Correct slicing
        },
      },
      {
        $unwind: "$followers",
      },
      {
        $lookup: {
          from: "users",
          localField: "followers",
          foreignField: "_id",
          as: "userInfo",
        },
      },
      {
        $unwind: "$userInfo",
      },
      {
        $group: {
          _id: null,
          followers: {
            $push: {
              id: "$userInfo._id",
              name: "$userInfo.name",
              avatar: "$userInfo.avatar.url",
            },
          },
        },
      },
    ]);

    if (!result) {
      res.status(200).json({ followers: [] });
      return;
    }

    res.status(200).json({ followers: result.followers });
  }
);

profileRouter.get(
  "/followings",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const owner = req.user?.id;

    if (!owner) {
      res.status(403).json({ message: "unauthorized access." });
      return;
    }

    const { limit = "20", pageNo = "0" } = req.query as PageRequestDocument;

    const [result] = await users.aggregate([
      { $match: { _id: new mongoose.Types.ObjectId(owner) } }, // Convert to ObjectId
      {
        $project: {
          followings: {
            $slice: [
              "$followings",
              parseInt(pageNo) * parseInt(limit),
              parseInt(limit),
            ],
          }, // Correct slicing
        },
      },
      {
        $unwind: "$followings",
      },
      {
        $lookup: {
          from: "users",
          localField: "followings",
          foreignField: "_id",
          as: "userInfo",
        },
      },
      {
        $unwind: "$userInfo",
      },
      {
        $group: {
          _id: null,
          followings: {
            $push: {
              id: "$userInfo._id",
              name: "$userInfo.name",
              avatar: "$userInfo.avatar.url",
            },
          },
        },
      },
    ]);

    if (!result) {
      res.status(200).json({ followings: [] });
      return;
    }

    res.status(200).json({ followers: result.followings });
  }
);

profileRouter.get(
  "/playlist-audios/:playlistId",
  async (req: Request, res: Response): Promise<void> => {
    // const owner = req.user?.id;

    const { playlistId } = req.params;

    if (!isValidObjectId(playlistId)) {
      res.status(500).json({ message: "Invalid playlist id." });
      return;
    }

    const { limit = "20", pageNo = "0" } = req.query as PageRequestDocument;

    const agg = [
      {
        $match: {
          _id: new Types.ObjectId(playlistId),
          visibility: { $ne: "private" },
        },
      },
      {
        $project: {
          items: {
            $slice: [
              "items",
              parseInt(pageNo) * parseInt(limit),
              parseInt(limit),
            ],
          },
          title: "$title",
        },
      },
      { $unwind: "items" },
      {
        $lookup: {
          from: "audios",
          localField: "items",
          foreignField: "_id",
          as: "audios",
        },
      },
      { $unwind: "$audios" },
      {
        $lookup: {
          from: "users",
          localField: "audios.owner",
          foreignField: "_id",
          as: "userInfo",
        },
      },
      { $unwind: "$userInfo" },
      {
        $group: {
          _id: {
            title: "$title",
            id: "$_id",
          },
          audios: {
            $push: {
              id: "$audios._id",
              title: "$audios.title",
              about: "$audios.about",
              category: "$audios.category",
              file: "$audios.file.url",
              poster: "$audios.poster.url",
              owner: { name: "$userInfo.name", id: "$userInfo._id" },
            },
          },
        },
      },
      {
        $project: {
          _id: 0,
          id: "$_id.id",
          title: "$_id.title",
          audios: "$$ROOT.audios",
        },
      },
    ];

    const [playlistResult] = await Playlist.aggregate(agg);
    const [autoPlaylistResult] = await AutoGeneratedPlaylist.aggregate(agg);

    if (!playlistResult) {
      res.status(200).json({ playlist: autoPlaylistResult });
      return;
    }

    res.status(200).json({ playlist: playlistResult });
  }
);
profileRouter.get(
  "/private/playlist-audios/:playlistId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const owner = req.user?.id;

    const { playlistId } = req.params;

    if (!isValidObjectId(playlistId)) {
      res.status(500).json({ message: "Invalid playlist id." });
      return;
    }

    const { limit = "20", pageNo = "0" } = req.query as PageRequestDocument;

    const agg = [
      {
        $match: {
          _id: new Types.ObjectId(playlistId),
          owner: owner,
          //   visibility: { $ne: "private" },
        },
      },
      {
        $project: {
          items: {
            $slice: [
              "items",
              parseInt(pageNo) * parseInt(limit),
              parseInt(limit),
            ],
          },
          title: "$title",
        },
      },
      { $unwind: "items" },
      {
        $lookup: {
          from: "audios",
          localField: "items",
          foreignField: "_id",
          as: "audios",
        },
      },
      { $unwind: "$audios" },
      {
        $lookup: {
          from: "users",
          localField: "audios.owner",
          foreignField: "_id",
          as: "userInfo",
        },
      },
      { $unwind: "$userInfo" },
      {
        $group: {
          _id: {
            title: "$title",
            id: "$_id",
          },
          audios: {
            $push: {
              id: "$audios._id",
              title: "$audios.title",
              about: "$audios.about",
              category: "$audios.category",
              file: "$audios.file.url",
              poster: "$audios.poster.url",
              owner: { name: "$userInfo.name", id: "$userInfo._id" },
            },
          },
        },
      },
      {
        $project: {
          _id: 0,
          id: "$_id.id",
          title: "$_id.title",
          audios: "$$ROOT.audios",
        },
      },
    ];

    const [playlistResult] = await Playlist.aggregate(agg);
    const [autoPlaylistResult] = await AutoGeneratedPlaylist.aggregate(agg);

    if (!playlistResult) {
      res.status(200).json({ playlist: autoPlaylistResult });
      return;
    }

    res.status(200).json({ playlist: playlistResult });
  }
);

profileRouter.get(
  "/is-following/:profileId",
  isAuthenticated,
  async (req: Request, res: Response): Promise<void> => {
    const { profileId } = req.params;

    if (!isValidObjectId(profileId)) {
      res.status(422).json({ message: "Invalid profile id." });
      return;
    }

    const isFollowing = await users.findOne({
      _id: profileId,
      followers: req.user?.id,
    });

    res.status(200).json({ isFollowing: isFollowing ? true : false });
  }
);
export default profileRouter;
